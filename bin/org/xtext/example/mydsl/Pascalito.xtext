// automatically generated by Xtext
grammar org.xtext.example.mydsl.Pascalito with org.eclipse.xtext.common.Terminals

import "http://www.example.org/pascalito" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	'program' Ident=EString
	'{'
		block=Block
	'}';

Command returns Command:
	CallProc | Atribuition | If | Loop;

Expression returns Expression:
	ExpNeg | ExpBinNv0;

EString returns ecore::EString:
	STRING | ID;

Block returns Block:
	{Block}
		('var' defVariable+=Variable ( "," defVariable+=Variable)* ";")*
		('procedure' defprocedure+=Procedure)*
		'start' (execute+=Command)* 'end'
	;

Variable returns Variable:
	{Variable}
		name=ID
	;

Procedure returns Procedure:
		(name=ID "(" (parameter+=Variable ( "," parameter+=Variable)* )?")")
				"{"
		block=Block
		"}"
	;
	
CallProc returns CallProc:
defined=[Procedure|ID]
		( '(' (parameter+=Expression ( "," parameter+=Expression)* )? ')' )
	';';

Atribuition returns Atribuition:
		sets=[Variable|ID]
		OP_ASSIGNMENT atribuiResultado=Expression ';'
		;

If returns If:
		'if' '(' ifExp=Expression ')'
		 '{' (do+=Command)* '}'
		('else' '{' (elseCmd+=Command)* '}' )?
	;

Loop returns Loop:
	'Loop' '(' while=Expression ')'
		'{' (do+=Command)* '}'
	;

CallProcExp returns CallProcExp:
represent=[Procedure|ID]
	( '(' (parameter+=Expression ( "," parameter+=Expression)* )? ')' );

CallVariable returns CallVariable:
		represent=[Variable|ID]
	;

ExpBinNv0 returns Expression:
  ExpBinNv1 ({ExpBinNv0.left=current} OP_ARIT_PRIO_0 right=ExpBinNv1)*;
  
ExpBinNv1 returns Expression:
  ExpBinLogical ({ExpBinNv1.left=current} OP_ARIT_PRIO_1 right=ExpBinLogical)*;
  
ExpBinLogical returns Expression:
  Primary ({ExpBinLogical.left=current} OP_COMPARISON right=Primary)*;
  
Primary returns Expression:
  NumberLiteral |
  CallProcExp |
  CallVariable |
  '(' ExpBinNv0 ')';
  
NumberLiteral:
	{NumberLiteral}
  EBigDecimal;
  
EBigDecimal returns ecore::EBigDecimal:
	INT |
	INT '.' INT;

ExpNeg returns ExpNeg:
	 OP_NEGATE negate=Expression
	;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
//terminal 
OP_COMPARISON: '<'|'>'|'=<'|'>=' |'==' | 'AND' | 'OR' | 'XOR' | '!=';
//terminal 
OP_ARIT_PRIO_0:	'-'|'+';
OP_ARIT_PRIO_1: '*'|'/';
//terminal 
OP_ASSIGNMENT:	'->';
//terminal 
OP_NEGATE:	'-';