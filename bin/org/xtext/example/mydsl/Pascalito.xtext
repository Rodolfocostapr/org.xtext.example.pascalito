// automatically generated by Xtext
grammar org.xtext.example.mydsl.Pascalito with org.eclipse.xtext.common.Terminals

import "http://www.example.org/pascalito" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Programa returns Programa:
	'programa' Ident=EString
	'{'
		bloco=Bloco
	'}';






Comando returns Comando:
	CallProcedimento | Atribuicao | Desvio | Loop;

Expressao returns Expressao:
	CallVariavel | CallProc |Number | ExpBinLogica | ExpBin | ExpNeg;

EString returns ecore::EString:
	STRING | ID;

Bloco returns Bloco:
	{Bloco}
		('var' defvariavel+=Variavel ( "," defvariavel+=Variavel)* ";")*
		('procedimento' defprocedimento+=Procedimento)*
		'Inicio' (executa+=Comando)* 'Fim'
	;

Variavel returns Variavel:
	{Variavel}
		name=ID
//		(' -> ' Valor=EString)? - DEFINIR SE VAMOS FAZER ATRIBUIÇÃO NA DEFINIÇÃO.
	;

Procedimento returns Procedimento:
		(name=ID "(" (parametro+=Variavel ( "," parametro+=Variavel)* )?")")
				"{"
		bloco=Bloco
		"}"
	;
	
CallProcedimento returns CallProcedimento:
definido=[Procedimento|ID]
		( '(' (parametro+=Expressao ( "," parametro+=Expressao)* )? ')' )
	';';

Atribuicao returns Atribuicao:
		atribui=[Variavel|ID]
		OT_ASSIGNMENT atribuiResultado=Expressao ';'
		;

Desvio returns Desvio:
		'if' '(' se=Expressao ')'
		 '{' (faca+=Comando)* '}'
		('else' '{' (seNao+=Comando)* '}' )?
	;

Loop returns Loop:
	'Loop' '(' se=Expressao ')'
		'{' (faca+=Comando)* '}'
	;

EBigDecimal returns ecore::EBigDecimal:
	INT? '.' INT;

CallProc returns CallProc:
representaProc=[Procedimento|ID]
	( '(' (parametro+=Expressao ( "," parametro+=Expressao)* )? ')' );

CallVariavel returns CallVariavel:
		representa=[Variavel|ID]
	;

Number returns Number:
	{Number}
		(Valor=EInt)
	;

ExpBinLogica returns ExpBinLogica:
		'operandoEsq' operandoEsq=Expressao
		OT_COMPARISON
		'operandoDir' operandoDir=Expressao
	;

ExpBin returns ExpBin:
		'operandoEsq' operandoEsq=Expressao
		OT_ARITHMETIC
		'operandoDir' operandoDir=Expressao
	;
	
//terminal 
OT_COMPARISON: '<'|'>'|'=<'|'>=' |'==';
//terminal 
OT_ARITHMETIC:	'-'|'+'|'*'|'/';
//terminal 
OT_ASSIGNMENT:	'->';
//terminal 
OT_NEGATE:	'-';



ExpNeg returns ExpNeg:
	'ExpNeg'
	'{'
		('Prioridade' Prioridade=EBigDecimal)?
		('Operador' Operador=EString)?
		'nega' nega=Expressao
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';