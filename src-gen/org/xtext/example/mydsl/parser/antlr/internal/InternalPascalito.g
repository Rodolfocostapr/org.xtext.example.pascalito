/*
 * generated by Xtext 2.10.0
 */
grammar InternalPascalito;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.PascalitoGrammarAccess;

}

@parser::members {

 	private PascalitoGrammarAccess grammarAccess;

    public InternalPascalitoParser(TokenStream input, PascalitoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected PascalitoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='program'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getProgramKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getIdentEStringParserRuleCall_1_0());
				}
				lv_Ident_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"Ident",
						lv_Ident_1_0,
						"org.xtext.example.mydsl.Pascalito.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_block_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"block",
						lv_block_3_0,
						"org.xtext.example.mydsl.Pascalito.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getCallProcParserRuleCall_0());
		}
		this_CallProc_0=ruleCallProc
		{
			$current = $this_CallProc_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getAtribuitionParserRuleCall_1());
		}
		this_Atribuition_1=ruleAtribuition
		{
			$current = $this_Atribuition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getIfParserRuleCall_2());
		}
		this_If_2=ruleIf
		{
			$current = $this_If_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getLoopParserRuleCall_3());
		}
		this_Loop_3=ruleLoop
		{
			$current = $this_Loop_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getExpNegParserRuleCall_0());
		}
		this_ExpNeg_0=ruleExpNeg
		{
			$current = $this_ExpNeg_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getExpBinNv0ParserRuleCall_1());
		}
		this_ExpBinNv0_1=ruleExpBinNv0
		{
			$current = $this_ExpBinNv0_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		(
			otherlv_1='var'
			{
				newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getVarKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getDefVariableVariableParserRuleCall_1_1_0());
					}
					lv_defVariable_2_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"defVariable",
							lv_defVariable_2_0,
							"org.xtext.example.mydsl.Pascalito.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBlockAccess().getDefVariableVariableParserRuleCall_1_2_1_0());
						}
						lv_defVariable_4_0=ruleVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBlockRule());
							}
							add(
								$current,
								"defVariable",
								lv_defVariable_4_0,
								"org.xtext.example.mydsl.Pascalito.Variable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getBlockAccess().getSemicolonKeyword_1_3());
			}
		)*
		(
			otherlv_6='procedure'
			{
				newLeafNode(otherlv_6, grammarAccess.getBlockAccess().getProcedureKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getDefprocedureProcedureParserRuleCall_2_1_0());
					}
					lv_defprocedure_7_0=ruleProcedure
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"defprocedure",
							lv_defprocedure_7_0,
							"org.xtext.example.mydsl.Pascalito.Procedure");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8='start'
		{
			newLeafNode(otherlv_8, grammarAccess.getBlockAccess().getStartKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getExecuteCommandParserRuleCall_4_0());
				}
				lv_execute_9_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"execute",
						lv_execute_9_0,
						"org.xtext.example.mydsl.Pascalito.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='end'
		{
			newLeafNode(otherlv_10, grammarAccess.getBlockAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableAccess().getVariableAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	iv_ruleProcedure=ruleProcedure
	{ $current=$iv_ruleProcedure.current; }
	EOF;

// Rule Procedure
ruleProcedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcedureRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getProcedureAccess().getParameterVariableParserRuleCall_0_2_0_0());
						}
						lv_parameter_2_0=ruleVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProcedureRule());
							}
							add(
								$current,
								"parameter",
								lv_parameter_2_0,
								"org.xtext.example.mydsl.Pascalito.Variable");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getProcedureAccess().getCommaKeyword_0_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProcedureAccess().getParameterVariableParserRuleCall_0_2_1_1_0());
							}
							lv_parameter_4_0=ruleVariable
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProcedureRule());
								}
								add(
									$current,
									"parameter",
									lv_parameter_4_0,
									"org.xtext.example.mydsl.Pascalito.Variable");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getProcedureAccess().getRightParenthesisKeyword_0_3());
			}
		)
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getProcedureAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureAccess().getBlockBlockParserRuleCall_2_0());
				}
				lv_block_7_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureRule());
					}
					set(
						$current,
						"block",
						lv_block_7_0,
						"org.xtext.example.mydsl.Pascalito.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getProcedureAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleCallProc
entryRuleCallProc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallProcRule()); }
	iv_ruleCallProc=ruleCallProc
	{ $current=$iv_ruleCallProc.current; }
	EOF;

// Rule CallProc
ruleCallProc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCallProcRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getCallProcAccess().getDefinedProcedureCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getCallProcAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getCallProcAccess().getParameterExpressionParserRuleCall_1_1_0_0());
						}
						lv_parameter_2_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCallProcRule());
							}
							add(
								$current,
								"parameter",
								lv_parameter_2_0,
								"org.xtext.example.mydsl.Pascalito.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getCallProcAccess().getCommaKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getCallProcAccess().getParameterExpressionParserRuleCall_1_1_1_1_0());
							}
							lv_parameter_4_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getCallProcRule());
								}
								add(
									$current,
									"parameter",
									lv_parameter_4_0,
									"org.xtext.example.mydsl.Pascalito.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getCallProcAccess().getRightParenthesisKeyword_1_2());
			}
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getCallProcAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleAtribuition
entryRuleAtribuition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtribuitionRule()); }
	iv_ruleAtribuition=ruleAtribuition
	{ $current=$iv_ruleAtribuition.current; }
	EOF;

// Rule Atribuition
ruleAtribuition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtribuitionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAtribuitionAccess().getSetsVariableCrossReference_0_0());
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getAtribuitionAccess().getOP_ASSIGNMENTParserRuleCall_1());
		}
		ruleOP_ASSIGNMENT
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAtribuitionAccess().getAtribuiResultadoExpressionParserRuleCall_2_0());
				}
				lv_atribuiResultado_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtribuitionRule());
					}
					set(
						$current,
						"atribuiResultado",
						lv_atribuiResultado_2_0,
						"org.xtext.example.mydsl.Pascalito.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAtribuitionAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getIfExpExpressionParserRuleCall_2_0());
				}
				lv_ifExp_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"ifExp",
						lv_ifExp_2_0,
						"org.xtext.example.mydsl.Pascalito.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getDoCommandParserRuleCall_5_0());
				}
				lv_do_5_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					add(
						$current,
						"do",
						lv_do_5_0,
						"org.xtext.example.mydsl.Pascalito.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getIfAccess().getRightCurlyBracketKeyword_6());
		}
		(
			otherlv_7='else'
			{
				newLeafNode(otherlv_7, grammarAccess.getIfAccess().getElseKeyword_7_0());
			}
			otherlv_8='{'
			{
				newLeafNode(otherlv_8, grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfAccess().getElseCmdCommandParserRuleCall_7_2_0());
					}
					lv_elseCmd_9_0=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfRule());
						}
						add(
							$current,
							"elseCmd",
							lv_elseCmd_9_0,
							"org.xtext.example.mydsl.Pascalito.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getIfAccess().getRightCurlyBracketKeyword_7_3());
			}
		)?
	)
;

// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	iv_ruleLoop=ruleLoop
	{ $current=$iv_ruleLoop.current; }
	EOF;

// Rule Loop
ruleLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Loop'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopAccess().getLoopKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getWhileExpressionParserRuleCall_2_0());
				}
				lv_while_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					set(
						$current,
						"while",
						lv_while_2_0,
						"org.xtext.example.mydsl.Pascalito.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getLoopAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getDoCommandParserRuleCall_5_0());
				}
				lv_do_5_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					add(
						$current,
						"do",
						lv_do_5_0,
						"org.xtext.example.mydsl.Pascalito.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleCallProcExp
entryRuleCallProcExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallProcExpRule()); }
	iv_ruleCallProcExp=ruleCallProcExp
	{ $current=$iv_ruleCallProcExp.current; }
	EOF;

// Rule CallProcExp
ruleCallProcExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCallProcExpRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getCallProcExpAccess().getRepresentProcedureCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getCallProcExpAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getCallProcExpAccess().getParameterExpressionParserRuleCall_1_1_0_0());
						}
						lv_parameter_2_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCallProcExpRule());
							}
							add(
								$current,
								"parameter",
								lv_parameter_2_0,
								"org.xtext.example.mydsl.Pascalito.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getCallProcExpAccess().getCommaKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getCallProcExpAccess().getParameterExpressionParserRuleCall_1_1_1_1_0());
							}
							lv_parameter_4_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getCallProcExpRule());
								}
								add(
									$current,
									"parameter",
									lv_parameter_4_0,
									"org.xtext.example.mydsl.Pascalito.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getCallProcExpAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleCallVariable
entryRuleCallVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallVariableRule()); }
	iv_ruleCallVariable=ruleCallVariable
	{ $current=$iv_ruleCallVariable.current; }
	EOF;

// Rule CallVariable
ruleCallVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCallVariableRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getCallVariableAccess().getRepresentVariableCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleExpBinNv0
entryRuleExpBinNv0 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpBinNv0Rule()); }
	iv_ruleExpBinNv0=ruleExpBinNv0
	{ $current=$iv_ruleExpBinNv0.current; }
	EOF;

// Rule ExpBinNv0
ruleExpBinNv0 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpBinNv0Access().getExpBinNv1ParserRuleCall_0());
		}
		this_ExpBinNv1_0=ruleExpBinNv1
		{
			$current = $this_ExpBinNv1_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpBinNv0Access().getExpBinNv0LeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getExpBinNv0Access().getOP_ARIT_PRIO_0ParserRuleCall_1_1());
			}
			ruleOP_ARIT_PRIO_0
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpBinNv0Access().getRightExpBinNv1ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpBinNv1
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpBinNv0Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Pascalito.ExpBinNv1");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpBinNv1
entryRuleExpBinNv1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpBinNv1Rule()); }
	iv_ruleExpBinNv1=ruleExpBinNv1
	{ $current=$iv_ruleExpBinNv1.current; }
	EOF;

// Rule ExpBinNv1
ruleExpBinNv1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpBinNv1Access().getExpBinLogicalParserRuleCall_0());
		}
		this_ExpBinLogical_0=ruleExpBinLogical
		{
			$current = $this_ExpBinLogical_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpBinNv1Access().getExpBinNv1LeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getExpBinNv1Access().getOP_ARIT_PRIO_1ParserRuleCall_1_1());
			}
			ruleOP_ARIT_PRIO_1
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpBinNv1Access().getRightExpBinLogicalParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpBinLogical
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpBinNv1Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Pascalito.ExpBinLogical");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpBinLogical
entryRuleExpBinLogical returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpBinLogicalRule()); }
	iv_ruleExpBinLogical=ruleExpBinLogical
	{ $current=$iv_ruleExpBinLogical.current; }
	EOF;

// Rule ExpBinLogical
ruleExpBinLogical returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpBinLogicalAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpBinLogicalAccess().getExpBinLogicalLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getExpBinLogicalAccess().getOP_COMPARISONParserRuleCall_1_1());
			}
			ruleOP_COMPARISON
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpBinLogicalAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpBinLogicalRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Pascalito.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_0());
		}
		this_NumberLiteral_0=ruleNumberLiteral
		{
			$current = $this_NumberLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getCallProcExpParserRuleCall_1());
		}
		this_CallProcExp_1=ruleCallProcExp
		{
			$current = $this_CallProcExp_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getCallVariableParserRuleCall_2());
		}
		this_CallVariable_2=ruleCallVariable
		{
			$current = $this_CallVariable_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpBinNv0ParserRuleCall_3_1());
			}
			this_ExpBinNv0_4=ruleExpBinNv0
			{
				$current = $this_ExpBinNv0_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current; }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumberLiteralAccess().getNumberLiteralAction_0(),
					$current);
			}
		)
		{
			newCompositeNode(grammarAccess.getNumberLiteralAccess().getEBigDecimalParserRuleCall_1());
		}
		ruleEBigDecimal
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEBigDecimal
entryRuleEBigDecimal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBigDecimalRule()); }
	iv_ruleEBigDecimal=ruleEBigDecimal
	{ $current=$iv_ruleEBigDecimal.current.getText(); }
	EOF;

// Rule EBigDecimal
ruleEBigDecimal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getEBigDecimalAccess().getINTTerminalRuleCall_0());
		}
		    |
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEBigDecimalAccess().getINTTerminalRuleCall_1_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEBigDecimalAccess().getFullStopKeyword_1_1());
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getEBigDecimalAccess().getINTTerminalRuleCall_1_2());
			}
		)
	)
;

// Entry rule entryRuleExpNeg
entryRuleExpNeg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpNegRule()); }
	iv_ruleExpNeg=ruleExpNeg
	{ $current=$iv_ruleExpNeg.current; }
	EOF;

// Rule ExpNeg
ruleExpNeg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpNegAccess().getOP_NEGATEParserRuleCall_0());
		}
		ruleOP_NEGATE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpNegAccess().getNegateExpressionParserRuleCall_1_0());
				}
				lv_negate_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpNegRule());
					}
					set(
						$current,
						"negate",
						lv_negate_1_0,
						"org.xtext.example.mydsl.Pascalito.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOP_COMPARISON
entryRuleOP_COMPARISON returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOP_COMPARISONRule()); }
	iv_ruleOP_COMPARISON=ruleOP_COMPARISON
	{ $current=$iv_ruleOP_COMPARISON.current.getText(); }
	EOF;

// Rule OP_COMPARISON
ruleOP_COMPARISON returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_COMPARISONAccess().getLessThanSignKeyword_0());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_COMPARISONAccess().getGreaterThanSignKeyword_1());
		}
		    |
		kw='=<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_COMPARISONAccess().getEqualsSignLessThanSignKeyword_2());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_COMPARISONAccess().getGreaterThanSignEqualsSignKeyword_3());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_COMPARISONAccess().getEqualsSignEqualsSignKeyword_4());
		}
		    |
		kw='AND'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_COMPARISONAccess().getANDKeyword_5());
		}
		    |
		kw='OR'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_COMPARISONAccess().getORKeyword_6());
		}
		    |
		kw='XOR'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_COMPARISONAccess().getXORKeyword_7());
		}
	)
;

// Entry rule entryRuleOP_ARIT_PRIO_0
entryRuleOP_ARIT_PRIO_0 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOP_ARIT_PRIO_0Rule()); }
	iv_ruleOP_ARIT_PRIO_0=ruleOP_ARIT_PRIO_0
	{ $current=$iv_ruleOP_ARIT_PRIO_0.current.getText(); }
	EOF;

// Rule OP_ARIT_PRIO_0
ruleOP_ARIT_PRIO_0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_ARIT_PRIO_0Access().getHyphenMinusKeyword_0());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_ARIT_PRIO_0Access().getPlusSignKeyword_1());
		}
	)
;

// Entry rule entryRuleOP_ARIT_PRIO_1
entryRuleOP_ARIT_PRIO_1 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOP_ARIT_PRIO_1Rule()); }
	iv_ruleOP_ARIT_PRIO_1=ruleOP_ARIT_PRIO_1
	{ $current=$iv_ruleOP_ARIT_PRIO_1.current.getText(); }
	EOF;

// Rule OP_ARIT_PRIO_1
ruleOP_ARIT_PRIO_1 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_ARIT_PRIO_1Access().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_ARIT_PRIO_1Access().getSolidusKeyword_1());
		}
	)
;

// Entry rule entryRuleOP_ASSIGNMENT
entryRuleOP_ASSIGNMENT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOP_ASSIGNMENTRule()); }
	iv_ruleOP_ASSIGNMENT=ruleOP_ASSIGNMENT
	{ $current=$iv_ruleOP_ASSIGNMENT.current.getText(); }
	EOF;

// Rule OP_ASSIGNMENT
ruleOP_ASSIGNMENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='->'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOP_ASSIGNMENTAccess().getHyphenMinusGreaterThanSignKeyword());
	}
;

// Entry rule entryRuleOP_NEGATE
entryRuleOP_NEGATE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOP_NEGATERule()); }
	iv_ruleOP_NEGATE=ruleOP_NEGATE
	{ $current=$iv_ruleOP_NEGATE.current.getText(); }
	EOF;

// Rule OP_NEGATE
ruleOP_NEGATE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='-'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOP_NEGATEAccess().getHyphenMinusKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
