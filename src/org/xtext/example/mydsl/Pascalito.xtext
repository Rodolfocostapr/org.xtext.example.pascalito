// automatically generated by Xtext
grammar org.xtext.example.mydsl.Pascalito with org.eclipse.xtext.common.Terminals

import "http://www.example.org/pascalito" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Programa returns Programa:
	'programa' Ident=EString
	'{'
		bloco=Bloco
	'}';

Comando returns Comando:
	CallProcedimento | Atribuicao | Desvio | Loop;

Expressao returns Expressao:
	ExpNeg | Comutativa;

EString returns ecore::EString:
	STRING | ID;

Bloco returns Bloco:
	{Bloco}
		('var' defvariavel+=Variavel ( "," defvariavel+=Variavel)* ";")*
		('procedimento' defprocedimento+=Procedimento)*
		'inicio' (executa+=Comando)* 'fim'
	;

Variavel returns Variavel:
	{Variavel}
		name=ID
//		(' -> ' Valor=EString)? - DEFINIR SE VAMOS FAZER ATRIBUIÇÃO NA DEFINIÇÃO.
	;

Procedimento returns Procedimento:
		(name=ID "(" (parametro+=Variavel ( "," parametro+=Variavel)* )?")")
				"{"
		bloco=Bloco
		"}"
	;
	
CallProcedimento returns CallProcedimento:
definido=[Procedimento|ID]
		( '(' (parametro+=Expressao ( "," parametro+=Expressao)* )? ')' )
	';';

Atribuicao returns Atribuicao:
		atribui=[Variavel|ID]
		OP_ASSIGNMENT atribuiResultado=Expressao ';'
		;

Desvio returns Desvio:
		'if' '(' se=Expressao ')'
		 '{' (faca+=Comando)* '}'
		('else' '{' (seNao+=Comando)* '}' )?
	;

Loop returns Loop:
	'Loop' '(' se=Expressao ')'
		'{' (faca+=Comando)* '}'
	;

CallProc returns CallProc:
representaProc=[Procedimento|ID]
	( '(' (parametro+=Expressao ( "," parametro+=Expressao)* )? ')' );

CallVariavel returns CallVariavel:
		representa=[Variavel|ID]
	;

Comutativa returns Expressao:
  N_Comutativa ({Comutativa.left=current} OP_ARIT_PRIO_0 right=N_Comutativa)*;
  
N_Comutativa returns Expressao:
  ExpBinLogica ({N_Comutativa.left=current} OP_ARIT_PRIO_1 right=ExpBinLogica)*;
  
ExpBinLogica returns Expressao:
  Primary ({ExpBinLogica.left=current} OP_COMPARISON right=Primary)*;
  
Primary returns Expressao:
  NumberLiteral |
  CallProc |
  CallVariavel |
  '(' Comutativa ')';
  
NumberLiteral:
	{NumberLiteral}
  EBigDecimal;
  
EBigDecimal returns ecore::EBigDecimal:
	INT |
	INT '.' INT;

ExpNeg returns ExpNeg:
	 OP_NEGATE nega=Expressao
	;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
//terminal 
OP_COMPARISON: '<'|'>'|'=<'|'>=' |'==' | 'AND' | 'OR' | 'XOR';
//terminal 
OP_ARIT_PRIO_0:	'-'|'+';
OP_ARIT_PRIO_1: '*'|'/';
//terminal 
OP_ASSIGNMENT:	'->';
//terminal 
OP_NEGATE:	'-';